<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="1Zdu{+YziwZ`(mJP@=0c">choice</variable><variable id="ul#9Qev:Jj^3=SAo8Q}6">quiet</variable></variables><block type="pxt-on-start" id="kyFQ:QQ%j0/./+bvP%L?" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="yj@R_l73nevtAe)dMu#]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ave = 0" numlines="1" declaredvars="ave"></mutation><next><block type="typescript_statement" id="}gq%$Unp5PJ+^Z?Ef6q." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let pitch = 0" numlines="1" declaredvars="pitch"></mutation><next><block type="typescript_statement" id="aO%WFA{Tdgy:3*HIAV;u" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let span = 0" numlines="1" declaredvars="span"></mutation><next><block type="typescript_statement" id="TLjqo3ZP.ZT,`B(1iE`C" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace flexFX {" line1="    // We identify field-offsets defensively, just in case SoundExpression field-locations should " line2="    // change in future. (We presume their width will always be 4 digits)" line3="    const startVolPos = 1" line4="    const startFreqPos = 5" line5="    const durationPos = 9" line6="    const endVolPos = 26" line7="    const endFreqPos = 18" line8="" line9="    // NOTE: The built-in enums for sound effect parameters are hardly beginner-friendly!" line10="    //       By renaming them we can expose somewhat simpler concepts. " line11="    //       (This only works if we pass them over a function-call as arguments of type: number.)" line12="    // simplify the selection of wave-shape..." line13="    enum Wave {" line14="        //%block=&quot;Pure&quot;" line15="        SINE = WaveShape.Sine," line16="        //%block=&quot;Harsh&quot;" line17="        SAWTOOTH = WaveShape.Sawtooth," line18="        //%block=&quot;Mellow&quot;" line19="        TRIANGLE = WaveShape.Triangle," line20="        //%block=&quot;Buzzy&quot;" line21="        SQUARE = WaveShape.Square," line22="        //%block=&quot;Noisy&quot;" line23="        NOISE = WaveShape.Noise," line24="    }" line25="    // simplify the selection of frequency-trajectory..." line26="    enum Attack {" line27="        //% block=&quot;Slow&quot;" line28="        SLOW = InterpolationCurve.Linear," line29="        //% block=&quot;Medium&quot;" line30="        MEDIUM = InterpolationCurve.Curve," line31="        //% block=&quot;Fast&quot;" line32="        FAST = InterpolationCurve.Logarithmic" line33="    }" line34="    // Simplify (slightly) the selection of modulation-style..." line35="    enum Effect {" line36="        //% block=&quot;None&quot;" line37="        NONE = SoundExpressionEffect.None," line38="        //% block=&quot;Vibrato&quot;" line39="        VIBRATO = SoundExpressionEffect.Vibrato," line40="        //% block=&quot;Tremolo&quot;" line41="        TREMOLO = SoundExpressionEffect.Tremolo," line42="        //% block=&quot;Warble&quot;" line43="        WARBLE = SoundExpressionEffect.Warble" line44="    }" line45="" line46="" line47="    // provide activity events (for other components to synchronise with)" line48="    const FLEXFX_ACTIVITY_id = 1234 // TODO: Check this is a permissable value!" line49="    enum Status {" line50="        STARTING = 1," line51="        FINISHED = 2" line52="    }" line53="" line54="    class FlexFX {" line55="        // properties" line56="        id: string; // identifier" line57="" line58="        // A FlexFX has up to three component soundExpressions, PartA, PartB &amp; PartC" line59="        // Each part has a start and an end [frequency,volume], but endA===startB " line60="        // and endB===startC, so a three-part FlexFX moves through four [frequency,volume,time] points" line61="        // Points are defined to be fixed ratios of the &quot;performance&quot; [frequency,volume,duration] arguments" line62="        playPartA: boolean;" line63="        partA: soundExpression.Sound;" line64="        timeRatioA: number;" line65="" line66="        skipPartB: boolean; // a double FlexFX has a silent gap in the middle" line67="        playPartB: boolean;" line68="        partB: soundExpression.Sound;" line69="        timeRatioB: number;" line70="" line71="        playPartC: boolean;" line72="        partC: soundExpression.Sound;" line73="        timeRatioC: number;  // (always set to 1.0 - timeRatioA - timeRatioB)" line74="" line75="        // Point 0" line76="        freqRatio0: number;" line77="        volRatio0: number;" line78="        // Point 1" line79="        freqRatio1: number;" line80="        volRatio1: number;" line81="        // Point 2" line82="        usesPoint2: boolean;" line83="        freqRatio2: number;" line84="        volRatio2: number;" line85="        // Point 3" line86="        usesPoint3: boolean;" line87="        freqRatio3: number;" line88="        volRatio3: number;" line89="" line90="        constructor(id: string) {" line91="            this.id = id;" line92="            // until otherwise instructed..." line93="            this.playPartA = false;" line94="            this.playPartB = false;" line95="            this.playPartC = false;" line96="            this.usesPoint2 = false;" line97="            this.usesPoint3 = false;" line98="        }" line99="" line100="        // internal tools..." line101="        protected formatNumber(num: number, length: number) {" line102="            let result = Math.constrain(num | 0, 0, Math.pow(10, length) - 1) + &quot;&quot;;" line103="            while (result.length &lt; length) result = &quot;0&quot; + result;" line104="            return result;" line105="        }" line106="" line107="        protected insert(expression: string, offset: number, digits: string): string {" line108="            return expression.substr(0, offset) + digits + expression.substr(offset + digits.length);" line109="        }" line110="" line111="        // methods...  " line112="        // Sets up Part A:  (Point0)--(PartA)--(Point1)..." line113="        // This implicitly sets the start values for any Part B that follows" line114="        setPartA(freq0: number, vol0: number, wave: number, shape: number, fx: number, freq1: number, vol1: number, ms1: number) {" line115="            this.freqRatio0 = freq0;" line116="            this.volRatio0 = vol0;" line117="            this.freqRatio1 = freq1;" line118="            this.volRatio1 = vol1;" line119="            this.timeRatioA = ms1;" line120="            this.partA = new soundExpression.Sound;" line121="            this.partA.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line122="            this.playPartA = true;" line123="        }" line124="        // Adds a  Part B:  (Point0)--(PartA)--(Point1)--(PartB)--(Point2)..." line125="        // This also implicitly sets the start values for any Part C that follows" line126="        setPartB(wave: number, shape: number, fx: number, freq2: number, vol2: number, ms2: number) {" line127="            this.freqRatio2 = freq2;" line128="            this.volRatio2 = vol2;" line129="            this.timeRatioB = ms2;" line130="            this.partB = new soundExpression.Sound;" line131="            this.partB.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line132="            this.playPartB = true" line133="            this.usesPoint2 = true;" line134="        }" line135="        // Adds a silent Part B:  (Point0)--(PartA)--(Point1)--(silence)--(Point2)..." line136="        // This implicitly sets start values for the Part C that follows" line137="        silentPartB(freq2: number, vol2: number, ms2: number) {" line138="            this.freqRatio2 = freq2;" line139="            this.volRatio2 = vol2;" line140="            this.timeRatioB = ms2;" line141="            this.skipPartB = true;" line142="        }" line143="" line144="        // Adds an optional part C: (Point0)--(PartA)--(Point1)--(PartB)--(Point2)--(PartC)--(Point3)" line145="        setPartC(wave: number, shape: number, fx: number, freq3: number, vol3: number, ms3: number) {" line146="            // we have a PartC as well..." line147="            this.freqRatio3 = freq3;" line148="            this.volRatio3 = vol3;" line149="            this.timeRatioC = ms3;" line150="            this.partC = new soundExpression.Sound;" line151="            this.partC.src = music.createSoundEffect(wave, 333, 333, 666, 666, 999, fx, shape);" line152="            this.playPartC = true;" line153="            this.usesPoint2 = true;" line154="            this.usesPoint3 = true;" line155="        }" line156="" line157="        performUsing(freq: number, vol: number, ms: number) {" line158="            let loud = vol * 4 // map from [0...255] into range [0...1023]" line159="            // Point 0" line160="            let f0 = this.formatNumber(freq * this.freqRatio0, 4);" line161="            let v0 = this.formatNumber(loud * this.volRatio0, 4);" line162="            // Point 1" line163="            let f1 = this.formatNumber(freq * this.freqRatio1, 4);" line164="            let v1 = this.formatNumber(loud * this.volRatio1, 4);" line165="            let ms1 = this.formatNumber(ms * this.timeRatioA, 4)" line166="            // declarations required, even if unused..." line167="            let f2 = &quot;&quot;;" line168="            let v2 = &quot;&quot;;" line169="            let ms2 = &quot;&quot;;" line170="            let f3 = &quot;&quot;;" line171="            let v3 = &quot;&quot;;" line172="            let ms3 = &quot;&quot;;" line173="            // Point 2" line174="            if (this.usesPoint2) {" line175="                let f22 = this.formatNumber(freq * this.freqRatio2, 4);" line176="                let v22 = this.formatNumber(loud * this.volRatio2, 4);" line177="                let ms22 = this.formatNumber(ms * this.timeRatioB, 4)" line178="            }" line179="            // Point 3" line180="            if (this.usesPoint3) {" line181="                let f32 = this.formatNumber(freq * this.freqRatio3, 4);" line182="                let v32 = this.formatNumber(loud * this.volRatio3, 4);" line183="                let ms32 = this.formatNumber(ms * this.timeRatioC, 4)" line184="            }" line185="" line186="            // adjust PartA frequencies, volumes and duration " line187="            this.partA.src = this.insert(this.partA.src, startFreqPos, f0);" line188="            this.partA.src = this.insert(this.partA.src, startVolPos, v0);" line189="            this.partA.src = this.insert(this.partA.src, endFreqPos, f1);" line190="            this.partA.src = this.insert(this.partA.src, endVolPos, v1);" line191="            this.partA.src = this.insert(this.partA.src, durationPos, ms1);" line192="" line193="            if (this.playPartB) {   // adjust PartB frequencies, volumes and duration " line194="                this.partB.src = this.insert(this.partA.src, startFreqPos, f1);" line195="                this.partB.src = this.insert(this.partA.src, startVolPos, v1);" line196="                this.partB.src = this.insert(this.partA.src, endFreqPos, f2);" line197="                this.partB.src = this.insert(this.partA.src, endVolPos, v2);" line198="                this.partB.src = this.insert(this.partA.src, durationPos, ms2);" line199="            }" line200="            if (this.playPartC) {   // adjust PartC frequencies, volumes and duration " line201="                this.partC.src = this.insert(this.partA.src, startFreqPos, f2);" line202="                this.partC.src = this.insert(this.partA.src, startVolPos, v2);" line203="                this.partC.src = this.insert(this.partA.src, endFreqPos, f3);" line204="                this.partC.src = this.insert(this.partA.src, endVolPos, v3);" line205="                this.partC.src = this.insert(this.partA.src, durationPos, ms3);" line206="" line207="            }" line208="" line209="            // now for the actual performance..." line210="            control.raiseEvent(FLEXFX_ACTIVITY_id, Status.STARTING) // e.g. to synchronise opening displayed mouth" line211="            if (this.playPartA) {" line212="                music.playSoundEffect(this.partA.src, SoundExpressionPlayMode.UntilDone);" line213="            }" line214="            if (this.playPartB) {" line215="                music.playSoundEffect(this.partB.src, SoundExpressionPlayMode.UntilDone);" line216="            } else {" line217="                if (this.skipPartB) {   //   ...a silent gap in the middle..." line218="                    basic.pause(ms * this.timeRatioB)" line219="                }" line220="            }" line221="            if (this.playPartC) {" line222="                music.playSoundEffect(this.partC.src, SoundExpressionPlayMode.UntilDone);" line223="            }" line224="            control.raiseEvent(FLEXFX_ACTIVITY_id, Status.FINISHED); // e.g. to synchronise closing displayed mouth" line225="        }" line226="    }" line227="" line228="" line229="" line230="    // ***** Master array of currently defined FlexFX objects *****" line231="    let flexFXList: FlexFX[] = [];" line232="" line233="    /*** ADVANCED UI BLOCKS ***/" line234="    //% block=&quot;perform FlexFX $id at pitch $pitch with strength $strength for $ms ms&quot;" line235="    //% advanced=true" line236="    export function performFlexFX(id: string, pitch: number, vol: number, ms: number) {" line237="" line238="        let target: FlexFX = flexFXList.find(i =&gt; i.id === id)" line239="        if (target != null) {" line240="            target.performUsing(pitch, vol, ms);" line241="        }" line242="" line243="    }" line244="" line245="    //% block=&quot;create simple FlexFX called $id, using wave-shape $wave with attack $attack and effect $effect|pitch profile goes from $startPitchRatio to $endPitchRatio|volume profile goes from $startVolRatio to $endVolRatio&quot;" line246="    //% advanced=true" line247="    export function createFlexFX(" line248="        id: string, startPitchRatio: number, startVolRatio: number," line249="        wave: number, attack: number, effect: number, endPitchRatio: number, endVolRatio: number) {" line250="        // select or create target...        " line251="        let target2: FlexFX = flexFXList.find(i =&gt; i.id === id)" line252="        if (target2 == null) {" line253="            target2 = new FlexFX(id);" line254="            flexFXList.push(target2);" line255="        }" line256="        target2.setPartA(startPitchRatio, startVolRatio, wave, attack, effect, endPitchRatio, endVolRatio, 1.0);" line257="    }" line258="" line259="" line260="    //% block=&quot;create 2-part FlexFX called $id, first using wave-shape $waveA with attack $attackA and effect $effectA|then using wave-shape $waveB with attack $attackB and effect $effectB|pitch profile goes from $startPitchRatio to $midPitchRatio to $endPitchRatio|volume profile goes from $startVolRatio to $midVolRatio to $endVolRatio|first part uses timeRatioA of duration&quot;" line261="    //% advanced=true" line262="    export function create2PartFlexFX(" line263="        id: string, startPitchRatio: number, startVolRatio: number," line264="        waveA: number, attackA: number, effectA: number, midPitchRatio: number, midVolRatio: number," line265="        waveB: number, attackB: number, effectB: number, endPitchRatio: number, endVolRatio: number, timeRatioA: number) {" line266="        // select or create target...        " line267="        let target3: FlexFX = flexFXList.find(i =&gt; i.id === id)" line268="        if (target3 == null) {" line269="            target3 = new FlexFX(id);" line270="            flexFXList.push(target3);" line271="        }" line272="        target3.setPartA(startPitchRatio, startVolRatio, waveA, attackA, effectA, midPitchRatio, midVolRatio, timeRatioA);" line273="        target3.setPartB(waveB, attackB, effectB, endPitchRatio, endVolRatio, 1.0 - timeRatioA);" line274="" line275="    }" line276="" line277="    //% block=&quot;create 3-part FlexFX called $id, first using wave-shape $waveA with attack $attackA and effect $effectA|then using wave-shape $waveB with attack $attackB and effect $effectB|then using wave-shape $waveC with attack $attackC and effect $effectC|pitch profile goes from $startPitchRatio to $pitchABRatio to $pitchBCRatio to $endPitchRatio|volume profile goes from $startVolRatio to $volABRatio to $volBCRatio to $endVolRatio|first part uses $timeRatioA of duration, second part uses $timeratioB of it&quot;" line278="    //% advanced=true" line279="    export function create3PartFlexFX(" line280="        id: string, startPitchRatio: number, startVolRatio: number," line281="        waveA: number, attackA: number, effectA: number, pitchABRatio: number, volABRatio: number," line282="        waveB: number, attackB: number, effectB: number, pitchBCRatio: number, volBCRatio: number," line283="        waveC: number, attackC: number, effectC: number, endPitchRatio: number, endVolRatio: number," line284="        timeRatioA: number, timeRatioB: number) {" line285="        // select or create target...        " line286="        let target4: FlexFX = flexFXList.find(i =&gt; i.id === id)" line287="        if (target4 == null) {" line288="            target4 = new FlexFX(id);" line289="            flexFXList.push(target4);" line290="        }" line291="        target4.setPartA(startPitchRatio, startVolRatio, waveA, attackA, effectA, pitchABRatio, volABRatio, timeRatioA);" line292="        target4.setPartB(waveB, attackB, effectB, pitchBCRatio, volBCRatio, timeRatioB);" line293="        target4.setPartC(waveC, attackC, effectC, endPitchRatio, endVolRatio, 1.0 - timeRatioA - timeRatioB);" line294="" line295="    }" line296="" line297="" line298="    // two FlexFx parts, separated by a silence." line299="    //% block=&quot;create double FlexFX called $id, first using wave-shape $waveA with attack $attackA and effect $effectA|then using wave-shape $waveB with attack $attackB and effect $effectB|then using wave-shape $waveC with attack $attackC and effect $effectC|pitch profile goes from $startPitchRatio to $pitchABRatio to $pitchBCRatio to $endPitchRatio|volume profile goes from $startVolRatio to $volABRatio to $volBCRatio to $endVolRatio|first part uses $timeRatioA of duration, second part uses $timeratioB of it&quot;" line300="    //% block=&quot;create double FlexFX called $id, first using wave-shape $waveA with attack $attackA and effect $effectA|with pitch profile from $startPitchARatio to $endPitchARatio| and volume profile from $startVolARatio to $endVolARatio,| then using wave-shape $waveB with attack $attackB and effect $effectB|with pitch profile from $startPitchBRatio to $endPitchBRatio| and volume profile from $startVolBRatio to $endVolBRatio,||first part uses $timeRatioA of duration, silent gap uses $timeratioB of it&quot;" line301="    //% advanced=true" line302="    export function createDoubleFlexFX(" line303="        id: string, startPitchARatio: number, startVolARatio: number," line304="        waveA: number, attackA: number, effectA: number, endPitchARatio: number, endVolARatio: number," line305="        startPitchBRatio: number, startVolBRatio: number," line306="        waveB: number, attackB: number, effectB: number, endPitchBRatio: number, endVolBRatio: number," line307="        timeRatioA: number, timeGapRatio: number) {" line308="" line309="        // select or create target...        " line310="        let target5: FlexFX = flexFXList.find(i =&gt; i.id === id)" line311="        if (target5 == null) {" line312="            target5 = new FlexFX(id);" line313="            flexFXList.push(target5);" line314="        }" line315="        target5.setPartA(startPitchARatio, startVolARatio, waveA, attackA, effectA, endPitchARatio, endVolARatio, timeRatioA);" line316="        target5.silentPartB(startPitchBRatio, startVolBRatio, timeGapRatio);" line317="        target5.setPartC(waveB, attackB, effectB, endPitchBRatio, endVolBRatio, 1.0 - timeRatioA - timeGapRatio);" line318="" line319="    }" line320="    enum MoodSound {" line321="        //% block=&quot;Tweet&quot;" line322="        TWEET = &quot;TWEET&quot;," line323="        //% block=&quot;Laugh&quot;" line324="        LAUGH = &quot;LAUGH&quot;," line325="        //% block=&quot;Snore&quot;" line326="        SNORE = &quot;SNORE&quot;," line327="        //% block=&quot;Doo&quot;" line328="        DOO = &quot;DOO&quot;," line329="        //% block=&quot;Eh?&quot;" line330="        QUERY = &quot;QUERY&quot;," line331="        //% block=&quot;Uh-oh&quot;" line332="        UHOH = &quot;UHOH&quot;," line333="        //% block=&quot;Moan&quot;" line334="        MOAN = &quot;MOAN&quot;," line335="        //% block=&quot;Duh!&quot;" line336="        DUH = &quot;DUH&quot;," line337="        //% block=&quot;Waah&quot;" line338="        WAAH = &quot;WAAH&quot;," line339="        //% block=&quot;Growl&quot;" line340="        GROWL = &quot;GROWL&quot;" line341="    }" line342="" line343="    // *******************Create Built-in FlexFXs************************************" line344="" line345="    /*" line346="        Short-hand definitions are laid out as follows:" line347="        &lt;name&gt;             &lt;%Freq,%vol&gt;    at start of PartA" line348="        &lt;PartA wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartA &amp; start of PartB (if used)" line349="        &lt;PartB wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartB &amp; start of PartC (if used)" line350="        &lt;PartC wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartC (if used)" line351="    " line352="        The right-hand column shows the timing breakdown" line353="        */" line354="    /*" line355="    " line356="    TWEET         80% 45% " line357="    SIN LOG NONE 100% 80%    | 100%" line358="    */" line359="    createFlexFX(&quot;TWEET&quot;, 0.8, 0.45, Wave.SINE, Attack.FAST, Effect.NONE, 1.00, 0.8);" line360="" line361="" line362="    /*" line363="    LAUGH         70%  40%  " line364="    SAW LOG NONE 100% 100%   | 90%" line365="    SQU LIN NONE  70%  75%   | 10%" line366="    */" line367="    create2PartFlexFX(&quot;LAUGH&quot;, 0.70, 0.4," line368="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 1.00, 1.0," line369="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 0.7, 0.75, 0.9);" line370="" line371="    /*" line372="    SNORE       3508  10% " line373="    NOI VIB LIN  715 100%   | 50%" line374="    NOI VIB LIN 5008   0%   | 50%" line375="    NOTE: The noise-generator is highly sensitive to the chosen frequency-trajectory, and these strange values have been experimentally derived." line376="    By always invoking Snore.performUsing() with the scaling-factor (freq=1), these literal frequencies will get used as specified here!" line377="    */" line378="    create2PartFlexFX(&quot;SNORE&quot;, 3508, 0.1," line379="        Wave.NOISE, Attack.SLOW, Effect.VIBRATO, 715, 1.0," line380="        Wave.NOISE, Attack.SLOW, Effect.VIBRATO, 5008, 0, 0.50);" line381="" line382="    /*" line383="    DOO          300% 80% " line384="    SAW NONE LOG 100% 90%   |  5%" line385="    SQU NONE LIN 100% 70%   | 95%" line386="    */" line387="    create2PartFlexFX(&quot;DOO&quot;, 3.00, 0.8," line388="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 1.00, 0.9," line389="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 1.00, 0.7, 0.05);" line390="" line391="    /*" line392="    QUERY        110%  20% " line393="    SQU NONE LIN 100% 100%   | 20%" line394="    SQU NONE CUR 150%  20%   | 80%" line395="    */" line396="    create2PartFlexFX(&quot;QUERY&quot;, 1.10, 0.2," line397="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 1.00, 1.0," line398="        Wave.SQUARE, Attack.MEDIUM, Effect.NONE, 1.50, 0.2, 0.2);" line399="" line400="    /*" line401="    " line402="    UHOH         110%  40% " line403="    SAW NONE LOG 140% 100%   | 25%" line404="    SILENCE                  | 20%" line405="                 100%  80% " line406="    SQU NONE LIN  80%  75%   | 55%" line407="    */" line408="    createDoubleFlexFX(&quot;UHOH&quot;," line409="        1.10, 0.4, Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 1.40, 1.0," line410="        1.00, 0.8, Wave.SQUARE, Attack.SLOW, Effect.NONE, 0.80, 0.75," line411="        0.25, 0.2);" line412="" line413="    /*" line414="    MOAN         130%  60%" line415="    TRI NONE CUR 100% 100%   | 30%" line416="    TRI NONE CUR  95%  80%   | 60%" line417="    TRI NONE LIN 115%  55%   | 10%" line418="    */" line419="    create3PartFlexFX(&quot;MOAN&quot;, 1.30, 0.6," line420="        Wave.TRIANGLE, Attack.MEDIUM, Effect.NONE, 1.00, 1.0," line421="        Wave.TRIANGLE, Attack.MEDIUM, Effect.NONE, 0.95, 0.8," line422="        Wave.TRIANGLE, Attack.SLOW, Effect.NONE, 1.15, 0.55, 0.3, 0.6);" line423="" line424="    /*" line425="    DUH          100%  60%" line426="    SQU NONE LIN  95%  80%   | 10%" line427="    SQU NONE LIN 110% 100%   | 30%" line428="    SQU NONE LIN  66%  40%   | 60%" line429="    */" line430="    create3PartFlexFX(&quot;DUH&quot;, 1.00, 0.6," line431="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 0.95, 0.8," line432="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 1.10, 1.0," line433="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 0.66, 0.4, 0.1, 0.3);" line434="" line435="    /*" line436="    WAAH         100% 10%" line437="    SAW NONE CUR 140% 90%   | 20%" line438="    SAW NONE LIN 110% 20%   | 70%" line439="    SAW NONE LIN  30%  5%   | 10%" line440="    */" line441="    create3PartFlexFX(&quot;WAAH&quot;, 1.00, 0.1," line442="        Wave.SAWTOOTH, Attack.MEDIUM, Effect.NONE, 1.40, 0.9," line443="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 1.10, 0.2," line444="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 0.3, 0.05, 0.20, 0.70);" line445="" line446="    /*" line447="    GROWL         30%  50%" line448="    SAW NONE LOG 100%  80%   | 15%" line449="    SAW NONE LIN  90% 100%   | 60%" line450="    SAW NONE LIN  30%  75%   | 15%" line451="    */" line452="    create3PartFlexFX(&quot;GROWL&quot;, 0.30, 0.5," line453="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 1.00, 0.8," line454="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 0.90, 1.0," line455="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 0.30, 0.75, 0.15, 0.60);" line456="" line457="/*** SIMPLE UI BLOCKS ***/" line458="" line459="    //% block=&quot;emit $builtin || at pitch $pitch with strength $strength for $duration ms&quot;" line460="    //% expandableArgumentMode=&quot;toggle&quot;" line461="    //% pitch.min=100 pitch.max=800 pitch.defl=300" line462="    //% strength.min=0 strength.max=255 strength.defl=180" line463="    //% duration.min=50 duration.max=9999 duration.defl=1000" line464="    export function emit(builtIn:MoodSound, pitch: number, strength: number, duration: number) {" line465="        // select builtin target... " line466="        let target6: FlexFX = flexFXList.find(i =&gt; i.id === builtIn)" line467="        if (target6 != null) {" line468="            target6.performUsing(pitch, strength, duration);" line469="        }" line470="    }" line471="" line472="    //% block=&quot;hum || $repeat times with strength $strength over $duration ms&quot;" line473="    //% expandableArgumentMode=&quot;toggle&quot;" line474="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line475="    //% strength.min=0 strength.max=255 strength.defl=180" line476="    //% duration.min=1 duration.max=9999 duration.defl=2000" line477="    export function hum(repeat: number = 10, strength: number = 180, duration: number = 2000) {" line478="        quiet = false" line479="        ave = duration / repeat" line480="        pitch = randint(200, 350)" line481="        let skip = true" line482="        for (let index = 0; index &lt; repeat; index++) {" line483="            span = randint(0.2 * ave, 1.8 * ave)" line484="            if ((span &gt; 0.6 * ave) || (skip)) {" line485="                // mostly &quot;Dum&quot;..." line486="                performFlexFX(&quot;DOO&quot;, randint(150, 300), strength, span)" line487="                basic.pause(100)" line488="                skip = false" line489="            } else {" line490="                // .. with occasional short, higher-pitched &quot;Di&quot;" line491="                performFlexFX(&quot;DOO&quot;, randint(350, 500), strength, 0.25 * ave)" line492="                basic.pause(50)" line493="                skip = true" line494="            }" line495="        }" line496="        quiet = true" line497="    }" line498="" line499="    //% block=&quot;grumble || $repeat times with strength $strength over $duration ms&quot;" line500="    //% expandableArgumentMode=&quot;toggle&quot;" line501="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line502="    //% strength.min=0 strength.max=255 strength.defl=250" line503="    //% duration.min=1 duration.max=9999 duration.defl=3000" line504="    export function grumble(repeat: number = 5, strength: number = 250, duration: number = 3000) {" line505="        quiet = false" line506="        ave = duration / repeat" line507="        basic.showIcon(IconNames.Sad)" line508="        for (let index2 = 0; index2 &lt; repeat; index2++) {" line509="            span = randint(0.4 * ave, 1.8 * ave)" line510="            if (span &gt; 1.0 * ave) {" line511="                performFlexFX(&quot;DUH&quot;, randint(150, 300), strength, 0.5 * span)" line512="            } else {" line513="                performFlexFX(&quot;UHOH&quot;, randint(100, 200), strength, 2 * span)" line514="            }" line515="            pause(0.5 * span)" line516="        }" line517="        quiet = true" line518="    }" line519="" line520="    //% block=&quot;giggle || $repeat times with strength $strength over $duration ms&quot;" line521="    //% expandableArgumentMode=&quot;toggle&quot;" line522="    //% repeat.min=1 repeat.max=100 repeat.defl=12" line523="    //% strength.min=0 strength.max=255 strength.defl=200" line524="    //% duration.min=1 duration.max=9999 duration.defl=4000" line525="    export function giggle(repeat: number = 12, strength: number = 200, duration: number = 2000) {" line526="        quiet = false" line527="        ave = duration / repeat" line528="        pitch = randint(500, 700)" line529="        for (let index3 = 0; index3 &lt; repeat; index3++) {" line530="            span = randint(0.4 * ave, 1.8 * ave)" line531="            performFlexFX(&quot;LAUGH&quot;, pitch, strength, span)" line532="            pitch = 0.9 * pitch" line533="            basic.pause(100)" line534="        }" line535="        quiet = true" line536="    }" line537="" line538="    //% block=&quot;whistle || $repeat times with strength $strength over $duration ms&quot;" line539="    //% expandableArgumentMode=&quot;toggle&quot;" line540="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line541="    //% strength.min=0 strength.max=255 strength.defl=180" line542="    //% duration.min=1 duration.max=9999 duration.defl=2500" line543="    export function whistle(repeat: number = 8, strength: number = 180, duration: number = 2500) {" line544="        quiet = false" line545="        ave = duration / repeat" line546="        for (let index4 = 0; index4 &lt; repeat; index4++) {" line547="            span = randint(0.4 * ave, 1.8 * ave)" line548="            performFlexFX(&quot;TWEET&quot;, randint(600, 1200), strength, span)" line549="            basic.pause(100)" line550="        }" line551="        quiet = true" line552="    }" line553="" line554="    //% block=&quot;snore || $repeat times with strength $strength over $duration ms&quot;" line555="    //% expandableArgumentMode=&quot;toggle&quot;" line556="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line557="    //% strength.min=0 strength.max=255 strength.defl=150" line558="    //% duration.min=1 duration.max=9999 duration.defl=5000" line559="    export function snore(repeat: number = 8, strength: number = 150, duration: number = 5000) {" line560="        quiet = false" line561="        ave = duration / repeat" line562="        for (let index5 = 0; index5 &lt; repeat; index5++) {" line563="            span = randint(0.9 * ave, 1.1 * ave)" line564="            performFlexFX(&quot;SNORE&quot;, 1, 80, 0.3 * span);" line565="            pause(300);" line566="            performFlexFX(&quot;SNORE&quot;, 1, 150, 0.7 * span);" line567="            pause(500);" line568="        }" line569="        quiet = true" line570="    }" line571="" line572="    //% block=&quot;whimper || $repeat times with strength $strength over $duration ms&quot;" line573="    //% expandableArgumentMode=&quot;toggle&quot;" line574="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line575="    //% strength.min=0 strength.max=255 strength.defl=100" line576="    //% duration.min=1 duration.max=9999 duration.defl=4000" line577="    export function whimper(repeat: number = 10, strength: number = 100, duration: number = 4000) {" line578="        if (quiet) {" line579="            quiet = false" line580="            ave = duration / repeat" line581="            for (let index6 = 0; index6 &lt; repeat; index6++) {" line582="                performFlexFX(&quot;MOAN&quot;, randint(250, 400), strength, randint(0.7 * ave, 1.3 * ave))" line583="                basic.pause(300)" line584="            }" line585="            quiet = true" line586="        }" line587="    }" line588="" line589="    //% block=&quot;cry || $repeat times with strength $strength over $duration ms&quot;" line590="    //% expandableArgumentMode=&quot;toggle&quot;" line591="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line592="    //% strength.min=0 strength.max=255 strength.defl=200" line593="    //% duration.min=1 duration.max=9999 duration.defl=3000" line594="    export function cry(repeat: number = 8, strength: number = 200, duration: number = 3500) {" line595="        if (quiet) {" line596="            quiet = false" line597="            ave = duration / repeat" line598="            for (let index7 = 0; index7 &lt; repeat; index7++) {" line599="                span = randint(0.6 * ave, 1.5 * ave)" line600="                if (span &gt; 0.9 * ave) {" line601="                    performFlexFX(&quot;MOAN&quot;, randint(200, 350), 1.5 * strength, 0.5 * span)" line602="                } else {" line603="                    performFlexFX(&quot;WAAH&quot;, randint(250, 400), 0.05 * strength, 1.3 * span)" line604="                }" line605="                basic.pause(200)" line606="            }" line607="            quiet = true" line608="        }" line609="    }" line610="" line611="    //% block=&quot;shout || $repeat times with strength $strength over $duration ms&quot;" line612="    //% expandableArgumentMode=&quot;toggle&quot;" line613="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line614="    //% strength.min=0 strength.max=255 strength.defl=250" line615="    //% duration.min=1 duration.max=9999 duration.defl=2500" line616="    export function shout(repeat: number = 5, strength: number = 250, duration: number = 2500) {" line617="        if (quiet) {" line618="            quiet = false" line619="            ave = duration / repeat" line620="            for (let index8 = 0; index8 &lt; repeat; index8++) {" line621="                performFlexFX(&quot;GROWL&quot;, randint(320, 400), strength, randint(0.8 * ave, 1.2 * ave))" line622="                basic.pause(300)" line623="            }" line624="            quiet = true" line625="        }" line626="    }" line627="}" numlines="628"></mutation><next><block type="variables_set" id="lDZb#[Q@KH2fs8(|_+vz"><field name="VAR" id="ul#9Qev:Jj^3=SAo8Q}6">quiet</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="uM3LO?w|Ml8._9d7QW,h"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set" id="rb,pCD/+kljKxiK5%fE%"><field name="VAR" id="1Zdu{+YziwZ`(mJP@=0c">choice</field><value name="VALUE"><shadow type="math_number" id="t4}R(D6-Ws+n$ZQel+35"><field name="NUM">7</field></shadow></value><next><block type="music_set_built_in_speaker_enable" id="cY(n;kTI+hK9=#L~dxe/"><value name="enabled"><shadow type="toggleOnOff" id="A+QW!{88D0qyIuyZUZmc"><field name="on">false</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_button_event" id="CO[!|:;I*3-zo]gUl@+R" x="20" y="25561"><field name="NAME">Button.A</field><statement name="HANDLER"><block type="variables_set" id="{mdK/AOqoP#f*(_T#sV^"><field name="VAR" id="1Zdu{+YziwZ`(mJP@=0c">choice</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_modulo" id="[/bkHu=2`I]o:rXFczJU"><value name="DIVIDEND"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="UR`4zE]Y@hEJM,atPv,]" editable="false"><field name="EXPRESSION">(++choice)</field></block></value><value name="DIVISOR"><shadow type="math_number" id="duIdrmenErlF?7z9|I=-"><field name="NUM">8</field></shadow></value></block></value><next><block type="device_show_number" id="hW0_;8D}r{f6Kavc`{~0"><value name="number"><block type="math_arithmetic" id="F|#NStNTz3::/Ia?h*x."><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="Rg.)SUjAioeg-@.znfCk"><field name="VAR" id="1Zdu{+YziwZ`(mJP@=0c">choice</field></block></value><value name="B"><shadow type="math_number" id="ZMMA03)P73/$#2Urj(1$"><field name="NUM">1</field></shadow></value></block></value></block></next></block></statement></block><block type="device_button_event" id="kq1t`Lioi9{vZQDii!`K" x="564" y="25561"><field name="NAME">Button.B</field><statement name="HANDLER"><block type="function_call" id="}3xg|(q.Y=zzV-v`?,|k"><mutation name="doSound" functionid="%J!K!rgQG8-bAz10!RV4"><arg name="choice" id="dac6ff2pvku2ee6kq5dl" type="number"></arg></mutation><value name="dac6ff2pvku2ee6kq5dl"><shadow type="math_number"><field name="NUM">1</field></shadow><block type="math_arithmetic" id="#KLgB1c`=p#WZ)sj_^58"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="ZwXK(wjC2kq0yu(|J(1,"><field name="VAR" id="1Zdu{+YziwZ`(mJP@=0c">choice</field></block></value><value name="B"><shadow type="math_number" id="`:wTic})#1oe|=a.4{zQ"><field name="NUM">1</field></shadow></value></block></value></block></statement></block><block type="function_definition" id="D/9v|lm}xQuDeQeQt4At" x="20" y="25798"><mutation name="doSound" functionid="%J!K!rgQG8-bAz10!RV4"><arg name="choice" id="dac6ff2pvku2ee6kq5dl" type="number"></arg></mutation><field name="function_name">doSound</field><comment pinned="false" h="80" w="160">*********** test codes **********</comment><value name="dac6ff2pvku2ee6kq5dl"><shadow type="argument_reporter_number" id="J+QlRjJ0IIQT8iW(XVPf"><field name="VALUE">choice</field></shadow></value><statement name="STACK"><block type="typescript_statement" id=".fU/T@,XW{0bP@1jdvv8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (choice) {" line1="        case 1: flexFX.shout();" line2="            break;" line3="        case 2: flexFX.cry();" line4="            break;" line5="        case 3: flexFX.whimper();" line6="            break;" line7="        case 4: flexFX.snore();" line8="            break;" line9="        case 5: flexFX.whistle();" line10="            break;" line11="        case 6: flexFX.giggle();" line12="            break;" line13="        case 7: flexFX.grumble();" line14="            break;" line15="        case 8: flexFX.hum()" line16="    }" numlines="17"></mutation><next><block type="device_pause" id="DR:t%@Zj7UjH{J{1koae"><value name="pause"><shadow type="timePicker" id="Ljz2dV1|7N3=!dx{qs4`"><field name="ms">1000</field></shadow></value></block></next></block></statement></block></xml>