<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="am$pI3K{!LF9Z:WCp=(S">quiet</variable></variables><block type="function_definition" id="7)PeJtibyp9!PV=ls2@(" x="0" y="0"><mutation name="doMood" functionid="XFgOXO-Fca?*mfvEW([e"><arg name="choice" id="3b4jft6vmw5ynjiwlfkum" type="number"></arg></mutation><field name="function_name">doMood</field><comment pinned="false" h="80" w="160">*********** test codes **********</comment><value name="3b4jft6vmw5ynjiwlfkum"><shadow type="argument_reporter_number" id=")8T97g5o~Q,p4lh%]0mw"><field name="VALUE">choice</field></shadow></value><statement name="STACK"><block type="typescript_statement" id="Rtp+E{Q(ib_p=tfaZNf[" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (choice) {" line1="        case 1: flexFX.hum();" line2="            break;" line3="        case 2: flexFX.grumble();" line4="            break;" line5="        case 3: flexFX.giggle();" line6="            break;" line7="        case 4: flexFX.whistle();" line8="            break;" line9="        case 5: flexFX.snore();" line10="            break;" line11="        case 6: flexFX.whimper();" line12="            break;" line13="        case 7: flexFX.cry();" line14="            break;" line15="        case 8: flexFX.shout();" line16="            break;" line17="    }" numlines="18"></mutation><next><block type="device_pause" id="BEAL[%ImUnliM%.60kZ2"><value name="pause"><shadow type="timePicker" id="PAkZ%wg+kOhNG|}XK)$$"><field name="ms">1000</field></shadow></value></block></next></block></statement></block><block type="pxt-on-start" id="3$i_x{!OMhdJL#t13eu," x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" id="Sae7(!agdfO36CLq^Yk!" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let gap = 0" numlines="1" declaredvars="gap"></mutation><next><block type="typescript_statement" id="(ZzXXmKb3|(^1xaBg1y8" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ave = 0" numlines="1" declaredvars="ave"></mutation><next><block type="typescript_statement" id="qUYL43U3WF]Rrk+wt2Wp" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let pitch = 0" numlines="1" declaredvars="pitch"></mutation><next><block type="typescript_statement" id="Oe#?1qR|sX[)@]%$Lv*N" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let span = 0" numlines="1" declaredvars="span"></mutation><next><block type="typescript_statement" id="eX{J|*#`(;eJp#OFcKN6" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Wave {" line1="    //%block=&quot;Pure&quot;" line2="    SINE = WaveShape.Sine," line3="    //%block=&quot;Harsh&quot;" line4="    SAWTOOTH = WaveShape.Sawtooth," line5="    //%block=&quot;Mellow&quot;" line6="    TRIANGLE = WaveShape.Triangle," line7="    //%block=&quot;Buzzy&quot;" line8="    SQUARE = WaveShape.Square," line9="    //%block=&quot;Noisy&quot;" line10="    NOISE = WaveShape.Noise," line11="}" numlines="12"></mutation><next><block type="typescript_statement" id="zp{94g!9dMDF^h82MgQw" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Attack {" line1="    //% block=&quot;Slow&quot;" line2="    SLOW = InterpolationCurve.Linear," line3="    //% block=&quot;Medium&quot;" line4="    MEDIUM = InterpolationCurve.Curve," line5="    //% block=&quot;Fast&quot;" line6="    FAST = InterpolationCurve.Logarithmic" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="fX-2mN/DK%M2c?_S}xZ0" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum Effect {" line1="    //% block=&quot;None&quot;" line2="    NONE = SoundExpressionEffect.None," line3="    //% block=&quot;Vibrato&quot;" line4="    VIBRATO = SoundExpressionEffect.Vibrato," line5="    //% block=&quot;Tremolo&quot;" line6="    TREMOLO = SoundExpressionEffect.Tremolo," line7="    //% block=&quot;Warble&quot;" line8="    WARBLE = SoundExpressionEffect.Warble" line9="}" numlines="10"></mutation><next><block type="typescript_statement" id="WjgoX5]BCdc7g}1[Y}c." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MoodSound {" line1="    //% block=&quot;Tweet&quot;" line2="    TWEET = 1," line3="    //% block=&quot;Laugh&quot;" line4="    LAUGH = 2," line5="    //% block=&quot;Snore&quot;" line6="    SNORE = 3," line7="    //% block=&quot;Doo&quot;" line8="    DOO = 4," line9="    //% block=&quot;Eh?&quot;" line10="    QUERY = 5," line11="    //% block=&quot;Uh-oh&quot;" line12="    UHOH = 6," line13="    //% block=&quot;Moan&quot;" line14="    MOAN = 7," line15="    //% block=&quot;Duh!&quot;" line16="    DUH = 8," line17="    //% block=&quot;Waah&quot;" line18="    WAAH = 9," line19="    //% block=&quot;Growl&quot;" line20="    GROWL = 10" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="8jtvPI[D8l,t3b,kGb/`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace flexFX {" line1="" line2="    // provide activity events (for other components to synchronise with)" line3="    const FLEXFX_ACTIVITY_ID = 1234 // TODO: Check this is a permissable value!" line4="    enum Status {" line5="        STARTING = 1," line6="        FINISHED = 2" line7="    }" line8="" line9="    class FlexFX {" line10="        // properties" line11="        id: string; // identifier" line12="" line13="        // There are up to three component soundExpressions, PartA, PartB &amp; PartC" line14="        // Each part has a start and an end [frequency,volume], but endA===startB " line15="        // and endB===startC, so a three-part FlexFX moves through four [frequency,volume,time] points" line16="        // Points are defined to be fixed ratios of the &quot;performance&quot; [frequency,volume,duration] arguments" line17="        playPartA: boolean;" line18="        partA: soundExpression.Sound;" line19="        waveA: string;" line20="        from13A: string;" line21="        from22A: string;" line22="        from30A: string;" line23="        timeRatioA: number;" line24="" line25="        skipPartB: boolean;     // a double FlexFX has a silent gap in the middle" line26="        playPartB: boolean;" line27="        partB: soundExpression.Sound;" line28="        waveB: string;" line29="        from13B: string;" line30="        from22B: string;" line31="        from30B: string;" line32="        timeRatioB: number;" line33="" line34="        playPartC: boolean;" line35="        partC: soundExpression.Sound;" line36="        waveC: string;" line37="        from13C: string;" line38="        from22C: string;" line39="        from30C: string;" line40="        timeRatioC: number;  // (always set to 1.0 - timeRatioA - timeRatioB)" line41="" line42="        // Point 0" line43="        freqRatio0: number;" line44="        volRatio0: number;" line45="        // Point 1" line46="        freqRatio1: number;" line47="        volRatio1: number;" line48="        // Point 2" line49="        usesPoint2: boolean;" line50="        freqRatio2: number;" line51="        volRatio2: number;" line52="        // Point 3" line53="        usesPoint3: boolean;" line54="        freqRatio3: number;" line55="        volRatio3: number;" line56="" line57="        constructor(id: string) {" line58="            this.id = id;" line59="            // until otherwise instructed..." line60="            this.playPartA = false;" line61="            this.playPartB = false;" line62="            this.playPartC = false;" line63="            this.usesPoint2 = false;" line64="            this.usesPoint3 = false;" line65="        }" line66="" line67="        // internal tools..." line68="        protected formatNumber(num: number, length: number) {" line69="            let result = Math.constrain(num | 0, 0, Math.pow(10, length) - 1) + &quot;&quot;;" line70="            while (result.length &lt; length) result = &quot;0&quot; + result;" line71="            return result;" line72="        }" line73="" line74="        protected insert(expression: string, offset: number, digits: string): string {" line75="            return expression.substr(0, offset) + digits + expression.substr(offset + digits.length);" line76="        }" line77="" line78="" line79="" line80="        protected assemble(startFreq: string, startVol: string, endFreq: string, endVol: string, ms: string," line81="            wave: string, from13: string, from22: string, from30: string): string {" line82="            return wave + startVol + startFreq + ms + from13 + endFreq + from22 + endVol + from30;" line83="        }" line84="" line85="" line86="        // methods...  " line87="        // Sets up Part A:  (Point0)--(PartA)--(Point1)..." line88="        // This implicitly sets the start values for any Part B that follows" line89="        setPartA(freq0: number, vol0: number, wave: number, shape: number, fx: number, freq1: number, vol1: number, ms1: number) {" line90="            this.freqRatio0 = freq0;" line91="            this.volRatio0 = vol0;" line92="            this.freqRatio1 = freq1;" line93="            this.volRatio1 = vol1;" line94="            this.timeRatioA = ms1;" line95="            this.partA = new soundExpression.Sound;" line96="            this.partA.src = music.createSoundEffect(wave, 100, 101, 102, 103, 104, fx, shape);" line97="            // dismantle reusable parts..." line98="            this.waveA = this.partA.src[0];" line99="            this.from13A = this.partA.src.substr(13, 5);" line100="            this.from22A = this.partA.src.substr(22, 4);" line101="            this.from30A = this.partA.src.substr(30, 42);" line102="            this.playPartA = true;" line103="        }" line104="        // Adds a  Part B:  (Point0)--(PartA)--(Point1)--(PartB)--(Point2)..." line105="        // This also implicitly sets the start values for any Part C that follows" line106="        setPartB(wave: number, shape: number, fx: number, freq2: number, vol2: number, ms2: number) {" line107="            this.freqRatio2 = freq2;" line108="            this.volRatio2 = vol2;" line109="            this.timeRatioB = ms2;" line110="            this.partB = new soundExpression.Sound;" line111="            this.partB.src = music.createSoundEffect(wave, 200, 201, 202, 203, 204, fx, shape);" line112="            // dismantle reusable parts..." line113="            this.waveB = this.partA.src[0];" line114="            this.from13B = this.partB.src.substr(13, 5);" line115="            this.from22B = this.partB.src.substr(22, 4);" line116="            this.from30B = this.partB.src.substr(30, 42);" line117="            this.playPartB = true;" line118="            this.usesPoint2 = true;" line119="        }" line120="        // Adds a silent Part B:  (Point0)--(PartA)--(Point1)--(silence)--(Point2)..." line121="        // This implicitly sets start values for the Part C that follows" line122="        silentPartB(freq2: number, vol2: number, ms2: number) {" line123="            this.freqRatio2 = freq2;" line124="            this.volRatio2 = vol2;" line125="            this.timeRatioB = ms2;" line126="            this.skipPartB = true;" line127="        }" line128="" line129="        // Adds an optional part C: (Point0)--(PartA)--(Point1)--(PartB)--(Point2)--(PartC)--(Point3)" line130="        setPartC(wave: number, shape: number, fx: number, freq3: number, vol3: number, ms3: number) {" line131="            this.freqRatio3 = freq3;" line132="            this.volRatio3 = vol3;" line133="            this.timeRatioC = ms3;" line134="            this.partC = new soundExpression.Sound;" line135="            this.partC.src = music.createSoundEffect(wave, 300, 301, 302, 303, 304, fx, shape);" line136="            // dismantle reusable parts..." line137="            this.waveC = this.partA.src[0];" line138="            this.from13C = this.partC.src.substr(13, 5);" line139="            this.from22C = this.partC.src.substr(22, 4);" line140="            this.from30C = this.partC.src.substr(30, 42);" line141="            this.playPartC = true;" line142="            this.usesPoint2 = true;" line143="            this.usesPoint3 = true;" line144="        }" line145="" line146="        performUsing(freq: number, vol: number, ms: number) {" line147="            let loud = vol * 4 // map from [0...255] into range [0...1023]" line148="            // Point 0" line149="            let f0 = this.formatNumber(freq * this.freqRatio0, 4);" line150="            let v0 = this.formatNumber(loud * this.volRatio0, 4);" line151="            // Point 1" line152="            let f1 = this.formatNumber(freq * this.freqRatio1, 4);" line153="            let v1 = this.formatNumber(loud * this.volRatio1, 4);" line154="            let ms1 = this.formatNumber(ms * this.timeRatioA, 4);" line155="            // declarations required, even if unused..." line156="            let f2 = &quot;&quot;;" line157="            let v2 = &quot;&quot;;" line158="            let ms2 = &quot;&quot;;" line159="            let f3 = &quot;&quot;;" line160="            let v3 = &quot;&quot;;" line161="            let ms3 = &quot;&quot;;" line162="            // Point 2" line163="            if (this.usesPoint2) {" line164="                f2 = this.formatNumber(freq * this.freqRatio2, 4);" line165="                v2 = this.formatNumber(loud * this.volRatio2, 4);" line166="                ms2 = this.formatNumber(ms * this.timeRatioB, 4);" line167="            }" line168="            // Point 3" line169="            if (this.usesPoint3) {" line170="                f3 = this.formatNumber(freq * this.freqRatio3, 4);" line171="                v3 = this.formatNumber(loud * this.volRatio3, 4);" line172="                ms3 = this.formatNumber(ms * this.timeRatioC, 4);" line173="            }" line174="" line175="            // adjust PartA frequencies, volumes and duration " line176="            this.partA.src = this.assemble(f0, v0, f1, v1, ms1," line177="                this.waveA, this.from13A, this.from22A, this.from30A);" line178="            if (this.playPartB) {   // adjust PartB frequencies, volumes and duration " line179="                this.partB.src = this.assemble(f1, v1, f2, v2, ms2," line180="                    this.waveB, this.from13B, this.from22B, this.from30B);" line181="            }" line182="            if (this.playPartC) {   // adjust PartC frequencies, volumes and duration" line183="                this.partC.src = this.assemble(f2, v2, f3, v3, ms3," line184="                    this.waveC, this.from13C, this.from22C, this.from30C);" line185="            }" line186="" line187="            // now for the actual performance..." line188="            control.raiseEvent(FLEXFX_ACTIVITY_ID, Status.STARTING); // e.g. to synchronise opening displayed mouth" line189="            if (this.playPartA) {" line190="                music.playSoundEffect(this.partA.src, SoundExpressionPlayMode.UntilDone);" line191="            }" line192="            if (this.playPartB) {" line193="                music.playSoundEffect(this.partB.src, SoundExpressionPlayMode.UntilDone);" line194="            } else {" line195="                if (this.skipPartB) {   //   ...a silent gap in the middle..." line196="                    basic.pause(ms * this.timeRatioB);" line197="                }" line198="            }" line199="            if (this.playPartC) {" line200="                music.playSoundEffect(this.partC.src, SoundExpressionPlayMode.UntilDone);" line201="            }" line202="            control.raiseEvent(FLEXFX_ACTIVITY_ID, Status.FINISHED); // e.g. to synchronise closing displayed mouth" line203="        }" line204="    }" line205="" line206="    // ---- Central array of currently defined FlexFX objects ----" line207="    let flexFXList: FlexFX[] = [];" line208="" line209="    // ---- ADVANCED UI BLOCKS ----" line210="    /**" line211="    Perform a custom FlexFX " line212="     */" line213="    //% block=&quot;perform FlexFX $id at pitch $pitch with strength $vol for $ms ms&quot;" line214="    //% id.defl=&quot;DOO&quot;" line215="    //% pitch.min=50 pitch.max=2000 pitch.defl=250" line216="    //% vol.min=0 vol.max=255 vol.defl=180" line217="    //% ms.min=0 ms.max=10000 ms.defl=750" line218="    //% inlineInputMode=inline" line219="    //% advanced=true" line220="    //% weight=150" line221="    export function performFlexFX(id: string, pitch: number, vol: number, ms: number) {" line222="        let target: FlexFX = flexFXList.find(i =&gt; i.id === id);" line223="        if (target != null) {" line224="            target.performUsing(pitch, vol, ms);" line225="        }" line226="    }" line227="" line228="    /**" line229="    Create a simple custom FlexFX " line230="     */" line231="    //% block=&quot;create simple FlexFX: $id using wave-shape $wave      with attack $attack       and effect $effect|  pitch profile goes from $startPitchPercent                       to $endPitchPercent|volume profile goes from $startVolPercent                       to $endVolPercent&quot;" line232="    //% inlineInputMode=external" line233="    //% id.defl=&quot;simple&quot;" line234="    //% startPitchPercent.min=25 startPitchPercent.max=400 startPitchPercent.defl=100" line235="    //% startVolPercent.min=1 startVolPercent.max=100 startVolPercent.defl=100" line236="    //% endPitchPercent.min=10 endPitchPercent.max=400 endPitchPercent.defl=100" line237="    //% endVolPercent.min=1 endVolPercent.max=100 endVolPercent.defl=100" line238="    //% advanced=true" line239="    //% weight=140" line240="    export function createFlexFX(" line241="        id: string, startPitchPercent: number, startVolPercent: number," line242="        wave: Wave, attack: Attack, effect: Effect, endPitchPercent: number, endVolPercent: number) {" line243="        // select or create target...        " line244="        let target2: FlexFX = flexFXList.find(i =&gt; i.id === id);" line245="        if (target2 == null) {" line246="            target2 = new FlexFX(id);" line247="            flexFXList.push(target2);" line248="        }" line249="        target2.setPartA(startPitchPercent / 100, startVolPercent / 100, wave, attack, effect, endPitchPercent / 100, endVolPercent / 100, 1.0);" line250="    }" line251="" line252="" line253="    /**" line254="    Create a more complex two-part custom FlexFX " line255="     */" line256="    //% block=&quot;create 2-part FlexFX: $id| first using wave-shape $waveA            with attack $attackA             and effect $effectA|  then using wave-shape $waveB            with attack $attackB             and effect $effectB|  pitch profile goes from $startPitchPercent                       to $midPitchPercent                       to $endPitchPercent|volume profile goes from $startVolPercent                       to $midVolPercent                       to $endVolPercent|duration used for 1st part: $timePercentA&quot;" line257="    //% inlineInputMode=external" line258="    //% id.defl=&quot;2-part&quot;" line259="    //% startPitchPercent.min=10 startPitchPercent.max=400 startPitchPercent.defl=100" line260="    //% startVolPercent.min=1 startVolPercent.max=100 startVolPercent.defl=100" line261="    //% midPitchPercent.min=10 midPitchPercent.max=400 midPitchPercent.defl=100" line262="    //% midVolPercent.min=1 midVolPercent.max=0 midVolPercent.defl=100" line263="    //% endPitchPercent.min=10 endPitchPercent.max=400 endPitchPercent.defl=100" line264="    //% endVolPercent.min=1 endVolPercent.max=100 endVolPercent.defl=100" line265="    //% timePercentA.min=1 timePercentA.max=99 timePercentA.defl=50" line266="    //% advanced=true" line267="    //% weight=130" line268="    export function create2PartFlexFX(" line269="        id: string, startPitchPercent: number, startVolPercent: number," line270="        waveA: Wave, attackA: Attack, effectA: Effect, midPitchPercent: number, midVolPercent: number," line271="        waveB: Wave, attackB: Attack, effectB: Effect, endPitchPercent: number, endVolPercent: number, timePercentA: number) {" line272="        // select or create target...        " line273="        let target3: FlexFX = flexFXList.find(i =&gt; i.id === id);" line274="        if (target3 == null) {" line275="            target3 = new FlexFX(id);" line276="            flexFXList.push(target3);" line277="        }" line278="        target3.setPartA(startPitchPercent / 100, startVolPercent / 100, waveA, attackA, effectA, midPitchPercent / 100, midVolPercent / 100, timePercentA / 100);" line279="        target3.setPartB(waveB, attackB, effectB, endPitchPercent / 100, endVolPercent / 100," line280="            1.0 - (timePercentA / 100));" line281="" line282="    }" line283="" line284="    /**" line285="    Create a really complex three-part custom FlexFX " line286="     */" line287="    //% block=&quot;create 3-part FlexFX: $id|  first using wave-shape $waveA             with attack $attackA              and effect $effectA|   then using wave-shape $waveB             with attack $attackB              and effect $effectB|lastly using wave-shape $waveC             with attack $attackC              and effect $effectC|  pitch profile goes from $startPitchPercent                       to $pitchABPercent                       to $pitchBCPercent                       to $endPitchPercent|volume profile goes from $startVolPercent                       to $volABPercent                       to $volBCPercent                       to $endVolPercent|duration used for 1st part:$timePercentA|                   2nd part: $timePercentB&quot;" line288="    //% inlineInputMode=external" line289="    //% id.defl=&quot;3-part&quot;" line290="    //% startPitchPercent.min=10 startPitchPercent.max=400 startPitchPercent.defl=100" line291="    //% startVolPercent.min=1 startVolPercent.max=100 startVolPercent.defl=100" line292="    //% pitchABPercent.min=10 pitchABPercent.max=400 pitchABPercent.defl=100" line293="    //% volABPercent.min=1 volABPercent.max=0 volABPercent.defl=100" line294="    //% pitchBCPercent.min=10 pitchBCPercent.max=400 pitchBCPercent.defl=100" line295="    //% volBCPercent.min=1 volBCPercent.max=0 volBCPercent.defl=100" line296="    //% endPitchPercent.min=10 endPitchPercent.max=400 endPitchPercent.defl=100" line297="    //% endVolPercent.min=1 endVolPercent.max=100 endVolPercent.defl=100" line298="    //% timePercentA.min=1 timePercentA.max=99 timePercentA.defl=33" line299="    //% timePercentB.min=1 timePercentB.max=99 timePercentB.defl=33" line300="    //% advanced=true" line301="    //% weight=120" line302="    export function create3PartFlexFX(" line303="        id: string, startPitchPercent: number, startVolPercent: number," line304="        waveA: Wave, attackA: Attack, effectA: Effect, pitchABPercent: number, volABPercent: number," line305="        waveB: Wave, attackB: Attack, effectB: Effect, pitchBCPercent: number, volBCPercent: number," line306="        waveC: Wave, attackC: Attack, effectC: Effect, endPitchPercent: number, endVolPercent: number," line307="        timePercentA: number, timePercentB: number) {" line308="        // select or create target...        " line309="        let target4: FlexFX = flexFXList.find(i =&gt; i.id === id);" line310="        if (target4 == null) {" line311="            target4 = new FlexFX(id);" line312="            flexFXList.push(target4);" line313="        }" line314="        target4.setPartA(startPitchPercent / 100, startVolPercent / 100, waveA, attackA, effectA, pitchABPercent / 100, volABPercent / 100, timePercentA / 100);" line315="        target4.setPartB(waveB, attackB, effectB, pitchBCPercent / 100, volBCPercent / 100, timePercentB / 100);" line316="        target4.setPartC(waveC, attackC, effectC, endPitchPercent / 100, endVolPercent / 100," line317="            1.0 - (timePercentA - timePercentB) / 100);" line318="" line319="    }" line320="" line321="" line322="    /**" line323="    Create a FlexFx with two parts separated by a silence." line324="    */" line325="    //% block=&quot;create double FlexFX: $id|1st part using wave-shape $waveA               with attack $attackA                and effect $effectA|  pitch profile goes from $startPitchAPercent                       to $endPitchAPercent|volume profile goes from $startVolAPercent                       to $endVolAPercent|duration used for 1st part:$timePercentA|duration used for silence:  $timeGapPercent|2nd part using wave-shape $waveB               with attack $attackB                and effect $effectB|  pitch profile goes from $startPitchBPercent                       to $endPitchBPercent|volume profile goes from $startVolBPercent                       to $endVolBPercent&quot;" line326="    //% inlineInputMode=external" line327="    //% id.defl=&quot;double&quot;" line328="    //% startPitchAPercent.min=10 startPitchAPercent.max=400 startPitchAPercent.defl=100" line329="    //% startVolAPercent.min=1 startVolAPercent.max=100 startVolAPercent.defl=100" line330="    //% endPitchAPercent.min=10 endPitchAPercent.max=400 endPitchAPercent.defl=100" line331="    //% endVolAPercent.min=1 endVolAPercent.max=100 endVolAPercent.defl=100" line332="    //% startPitchBPercent.min=10 startPitchBPercent.max=400 startPitchBPercent.defl=75" line333="    //% startVolBPercent.min=1 startVolBPercent.max=100 startVolBPercent.defl=100" line334="    //% endPitchBPercent.min=10 endPitchBPercent.max=400 endPitchBPercent.defl=75" line335="    //% endVolBPercent.min=1 endVolBPercent.max=100 endVolBPercent.defl=100" line336="    //% timePercentA.min=1 timePercentA.max=99 timePercentA.defl=40" line337="    //% timeGapPercent.min=1 timeGapPercent.max=99 timeGapPercent.defl=20" line338="    //% advanced=true" line339="    //% weight=110" line340="    export function createDoubleFlexFX(" line341="        id: string, startPitchAPercent: number, startVolAPercent: number," line342="        waveA: Wave, attackA: Attack, effectA: Effect, endPitchAPercent: number, endVolAPercent: number," line343="        startPitchBPercent: number, startVolBPercent: number," line344="        waveB: Wave, attackB: Attack, effectB: Effect, endPitchBPercent: number, endVolBPercent: number," line345="        timePercentA: number, timeGapPercent: number) {" line346="" line347="        // select or create target...        " line348="        let target5: FlexFX = flexFXList.find(i =&gt; i.id === id);" line349="        if (target5 == null) {" line350="            target5 = new FlexFX(id);" line351="            flexFXList.push(target5);" line352="        }" line353="        target5.setPartA(startPitchAPercent / 100, startVolAPercent / 100, waveA, attackA, effectA, endPitchAPercent / 100, endVolAPercent / 100, timePercentA / 100);" line354="        target5.silentPartB(startPitchBPercent / 100, startVolBPercent / 100, timeGapPercent / 100);" line355="        target5.setPartC(waveB, attackB, effectB, endPitchBPercent / 100, endVolBPercent / 100," line356="            1.0 - (timePercentA - timeGapPercent) / 100);" line357="" line358="    }" line359="    // ---Create Built-in FlexFXs----" line360="" line361="    /*" line362="        Short-hand definitions are laid out as follows:" line363="        &lt;name&gt;             &lt;%Freq,%vol&gt;    at start of PartA" line364="        &lt;PartA wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartA &amp; start of PartB (if used)" line365="        &lt;PartB wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartB &amp; start of PartC (if used)" line366="        &lt;PartC wave-style&gt; &lt;%Freq,%vol&gt;    at end of PartC (if used)" line367="    " line368="        The right-hand column shows the timing breakdown" line369="    */" line370="" line371="    /*" line372="    TWEET         80%  45% " line373="    SIN LOG NONE 100% 100%   | 100%" line374="    */" line375="    createFlexFX(MoodSound.TWEET.toString(), 80, 45," line376="        Wave.SINE, Attack.FAST, Effect.NONE, 100, 100);" line377="" line378="    /*" line379="    LAUGH         70%  40%  " line380="    SAW LOG NONE 100% 100%   | 10%" line381="    SQU LIN NONE  70%  75%   | 90%" line382="    */" line383="    create2PartFlexFX(MoodSound.LAUGH.toString(), 70, 40," line384="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 100, 100," line385="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 70, 75, 90);" line386="" line387="    /*" line388="    SNORE       3508  10% " line389="    NOI VIB LIN  715 100%   | 50%" line390="    NOI VIB LIN 5008   0%   | 50%" line391="    NOTE: The noise-generator is highly sensitive to the chosen frequency-trajectory, and these strange values have been experimentally derived." line392="    By always invoking Snore.performUsing() with (freq=1), these literal frequencies will get used as specified here!" line393="    */" line394="    create2PartFlexFX(MoodSound.SNORE.toString(), 3508, 10," line395="        Wave.NOISE, Attack.SLOW, Effect.VIBRATO, 715, 100," line396="        Wave.NOISE, Attack.SLOW, Effect.VIBRATO, 5008, 0, 50);" line397="" line398="    /*" line399="    DOO          300% 80% " line400="    SAW LOG NONE 100% 90%   |  5%" line401="    SQU LIN NONE 100% 70%   | 95%" line402="    */" line403="    create2PartFlexFX(MoodSound.DOO.toString(), 300, 80," line404="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 100, 90," line405="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 100, 70, 5);" line406="" line407="    /*" line408="    QUERY        110%  20% " line409="    SQU LIN NONE 100% 100%   | 20%" line410="    SQU CUR NONE 150%  30%   | 80%" line411="    */" line412="    create2PartFlexFX(MoodSound.QUERY.toString(), 110, 20," line413="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 100, 100," line414="        Wave.SQUARE, Attack.MEDIUM, Effect.NONE, 150, 30, 20);" line415="" line416="    /*" line417="    " line418="    UHOH         110%  40% " line419="    SAW LOG NONE 120% 100%   | 20%" line420="    SILENCE                  | 20%" line421="                  95% 100% " line422="    SQU LIN NONE  85%  75%   | 60%" line423="    */" line424="    createDoubleFlexFX(MoodSound.UHOH.toString()," line425="        110, 40, Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 120, 100," line426="        95, 100, Wave.SQUARE, Attack.SLOW, Effect.NONE, 85, 75," line427="        20, 20);" line428="" line429="    /*" line430="    MOAN         120%  60%" line431="    TRI CUR NONE 100% 100%   | 60%" line432="    TRI CUR NONE  95%  80%   | 30%" line433="    TRI LIN NONE 115%  55%   | 10%" line434="    */" line435="    create3PartFlexFX(MoodSound.MOAN.toString(), 120, 60," line436="        Wave.TRIANGLE, Attack.MEDIUM, Effect.NONE, 100, 100," line437="        Wave.TRIANGLE, Attack.MEDIUM, Effect.NONE, 95, 80," line438="        Wave.TRIANGLE, Attack.SLOW, Effect.NONE, 115, 55, 60, 30);" line439="" line440="    /*" line441="    DUH          100%  60%" line442="    SQU LIN NONE  95% 100%   | 10%" line443="    SQU LIN NONE 110%  80%   | 25%" line444="    SQU LIN NONE  66%  40%   | 65%" line445="    */" line446="    create3PartFlexFX(MoodSound.DUH.toString(), 100, 60," line447="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 95, 100," line448="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 110, 80," line449="        Wave.SQUARE, Attack.SLOW, Effect.NONE, 66, 40, 10, 25);" line450="" line451="    /*" line452="    WAAH         100%  10%" line453="    SAW CUR NONE 140% 100%   | 70%" line454="    SAW LIN NONE 110%  60%   | 20%" line455="    SAW LIN NONE  30%   5%   | 10%" line456="    */" line457="    create3PartFlexFX(MoodSound.WAAH.toString(), 100, 10," line458="        Wave.SAWTOOTH, Attack.MEDIUM, Effect.NONE, 140, 100," line459="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 110, 60," line460="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 30, 5, 70, 20);" line461="" line462="    /*" line463="    GROWL         30%  50%" line464="    SAW LOG NONE 100%  80%   | 60%" line465="    SAW LIN NONE  90% 100%   | 15%" line466="    SAW LIN NONE  30%  75%   | 15%" line467="    */" line468="    create3PartFlexFX(MoodSound.GROWL.toString(), 30, 50," line469="        Wave.SAWTOOTH, Attack.FAST, Effect.NONE, 100, 80," line470="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 90, 100," line471="        Wave.SAWTOOTH, Attack.SLOW, Effect.NONE, 30, 75, 60, 15);" line472="" line473="    // *** SIMPLE UI BLOCKS ***" line474="" line475="    /** " line476="    Emit a built-in FlexFX Sound" line477="    */" line478="    //% block=&quot;emit $builtIn ||at pitch $pitch with strength $strength for $duration ms&quot;" line479="    //% expandableArgumentMode=&quot;toggle&quot;" line480="    //% inlineInputMode=inline" line481="    //% pitch.min=100 pitch.max=800 pitch.defl=300" line482="    //% strength.min=0 strength.max=255 strength.defl=180" line483="    //% duration.min=50 duration.max=9999 duration.defl=800" line484="    //% weight=300" line485="    export function emit(builtIn: MoodSound, pitch = 300, strength = 180, duration = 800) {" line486="        // select builtin target... " line487="        let target6: FlexFX = flexFXList.find(i =&gt; i.id === builtIn.toString());" line488="        if (target6 != null) {" line489="            target6.performUsing(pitch, strength, duration);" line490="        }" line491="    }" line492="" line493="    /** " line494="    Hum randomly for a while..." line495="    */" line496="    //% block=&quot;hum || $repeat times with strength $strength over $duration ms&quot;" line497="    //% expandableArgumentMode=&quot;toggle&quot;" line498="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line499="    //% strength.min=0 strength.max=255 strength.defl=180" line500="    //% duration.min=1 duration.max=9999 duration.defl=2000" line501="    //% weight=250" line502="    export function hum(repeat = 12, strength = 180, duration = 4000) {" line503="        quiet = false;" line504="        ave = duration / repeat;" line505="        gap = 0.2 * ave;" line506="        let skip = true;" line507="        for (let index = 0; index &lt; repeat; index++) {" line508="            span = randint(0.7 * ave, 1.4 * ave);" line509="            pitch = randint(200, 400);" line510="            if ((span &gt; ave) || (skip)) {" line511="                // mostly &quot;Dum&quot;..." line512="                performFlexFX(MoodSound.DOO.toString(), pitch, strength, span);" line513="                basic.pause(gap);" line514="                skip = false;" line515="            } else {" line516="                // .. with occasional short, higher-pitched &quot;Di&quot; (unrepeated)" line517="                performFlexFX(MoodSound.DOO.toString(), 1.33 * pitch, strength, 0.3 * ave);" line518="                basic.pause(gap / 2);" line519="                skip = true;" line520="            }" line521="        }" line522="        quiet = true;" line523="    }" line524="" line525="    /** " line526="    Complain randomly for a while..." line527="    */" line528="    //% block=&quot;grumble || $repeat times with strength $strength over $duration ms&quot;" line529="    //% expandableArgumentMode=&quot;toggle&quot;" line530="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line531="    //% strength.min=0 strength.max=255 strength.defl=250" line532="    //% duration.min=1 duration.max=9999 duration.defl=3000" line533="    //% weight=245" line534="    export function grumble(repeat = 5, strength = 180, duration = 4000) {" line535="        quiet = false;" line536="        ave = duration / repeat;" line537="        gap = 0.2 * ave;" line538="        for (let index2 = 0; index2 &lt; repeat; index2++) {" line539="            span = randint(0.4 * ave, 1.8 * ave);" line540="            if (span &gt; 0.8 * ave) {" line541="                performFlexFX(MoodSound.DUH.toString(), randint(150, 300), strength, 0.5 * span);" line542="            } else {" line543="                performFlexFX(MoodSound.UHOH.toString(), randint(100, 200), 1.2 * strength, 2 * span);" line544="            }" line545="            pause(gap);" line546="        }" line547="        quiet = true;" line548="    }" line549="" line550="    /**" line551="    Giggle for a bit..." line552="    */" line553="    //% block=&quot;giggle || $repeat times with strength $strength over $duration ms&quot;" line554="    //% expandableArgumentMode=&quot;toggle&quot;" line555="    //% repeat.min=1 repeat.max=100 repeat.defl=12" line556="    //% strength.min=0 strength.max=255 strength.defl=200" line557="    //% duration.min=1 duration.max=9999 duration.defl=4000" line558="    //% weight=240" line559="    export function giggle(repeat = 10, strength = 200, duration = 2000) {" line560="        quiet = false;" line561="        ave = duration / repeat;" line562="        gap = 0.2 * ave;" line563="        pitch = randint(350, 700);" line564="        for (let index3 = 0; index3 &lt; repeat; index3++) {" line565="            span = randint(0.4 * ave, 1.8 * ave);" line566="            performFlexFX(MoodSound.LAUGH.toString(), pitch, strength, span);" line567="            pitch = 0.95 * pitch;" line568="            basic.pause(gap);" line569="        }" line570="        quiet = true;" line571="    }" line572="" line573="" line574="    /** " line575="    Whistle a happy tune..." line576="    */" line577="    //% block=&quot;whistle || $repeat times with strength $strength over $duration ms&quot;" line578="    //% expandableArgumentMode=&quot;toggle&quot;" line579="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line580="    //% strength.min=0 strength.max=255 strength.defl=180" line581="    //% duration.min=1 duration.max=9999 duration.defl=2500" line582="    //% weight=235" line583="    export function whistle(repeat = 12, strength = 180, duration = 2500) {" line584="        quiet = false;" line585="        ave = duration / repeat;" line586="        gap = 0.2 * ave;" line587="        for (let index4 = 0; index4 &lt; repeat; index4++) {" line588="            span = randint(0.4 * ave, 1.8 * ave);" line589="            performFlexFX(MoodSound.TWEET.toString(), randint(800, 2000), strength, span);" line590="            basic.pause(gap);" line591="        }" line592="        quiet = true;" line593="    }" line594="" line595="" line596="    /** " line597="    Sleep rather noisily..." line598="    */" line599="    //% block=&quot;snore || $repeat times with strength $strength over $duration ms&quot;" line600="    //% expandableArgumentMode=&quot;toggle&quot;" line601="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line602="    //% strength.min=0 strength.max=255 strength.defl=150" line603="    //% duration.min=1 duration.max=9999 duration.defl=5000" line604="    //% weight=230" line605="    export function snore(repeat = 6, strength = 150, duration = 10000) {" line606="        quiet = false;" line607="        ave = duration / repeat;" line608="        for (let index5 = 0; index5 &lt; repeat; index5++) {" line609="            span = randint(0.9 * ave, 1.1 * ave);" line610="            performFlexFX(MoodSound.SNORE.toString(), 1, 80, 0.3 * span);" line611="            pause(0.1 * ave);" line612="            performFlexFX(MoodSound.SNORE.toString(), 1, 150, 0.4 * span);" line613="            pause(0.3 * ave);" line614="        }" line615="        quiet = true;" line616="    }" line617="" line618="" line619="    /** " line620="    Be just a bit frightened..." line621="    */" line622="    //% block=&quot;whimper || $repeat times with strength $strength over $duration ms&quot;" line623="    //% expandableArgumentMode=&quot;toggle&quot;" line624="    //% repeat.min=1 repeat.max=100 repeat.defl=10" line625="    //% strength.min=0 strength.max=255 strength.defl=100" line626="    //% duration.min=1 duration.max=9999 duration.defl=4000" line627="    //% weight=225" line628="    export function whimper(repeat = 8, strength = 150, duration = 5000) {" line629="        if (quiet) {" line630="            quiet = false;" line631="            ave = duration / repeat;" line632="            gap = 0.5 * ave;" line633="            for (let index6 = 0; index6 &lt; repeat; index6++) {" line634="                performFlexFX(MoodSound.MOAN.toString(), randint(350, 550), strength, randint(0.4 * ave, 1.4 * ave));" line635="                basic.pause(gap);" line636="            }" line637="            quiet = true;" line638="        }" line639="    }" line640="" line641="    /** " line642="    Be really sad..." line643="    */" line644="    //% block=&quot;cry || $repeat times with strength $strength over $duration ms&quot;" line645="    //% expandableArgumentMode=&quot;toggle&quot;" line646="    //% repeat.min=1 repeat.max=100 repeat.defl=8" line647="    //% strength.min=0 strength.max=255 strength.defl=200" line648="    //% duration.min=1 duration.max=9999 duration.defl=3000" line649="    //% weight=220" line650="    export function cry(repeat = 8, strength = 200, duration = 3500) {" line651="        if (quiet) {" line652="            quiet = false;" line653="            ave = duration / repeat;" line654="            gap = 0.3 * ave;" line655="            for (let index7 = 0; index7 &lt; repeat; index7++) {" line656="                span = randint(0.5 * ave, 1.2 * ave);" line657="                if (span &gt; ave) {" line658="                    performFlexFX(MoodSound.MOAN.toString(), randint(350, 550), 1.25 * strength, 0.7 * span);" line659="                } else {" line660="                    performFlexFX(MoodSound.WAAH.toString(), randint(350, 450), 0.5 * strength, 1.3 * span);" line661="                }" line662="                basic.pause(gap);" line663="            }" line664="            quiet = true;" line665="        }" line666="    }" line667="" line668="    /** " line669="    Be a bit grumpy..." line670="    */" line671="    //% block=&quot;shout || $repeat times with strength $strength over $duration ms&quot;" line672="    //% expandableArgumentMode=&quot;toggle&quot;" line673="    //% repeat.min=1 repeat.max=100 repeat.defl=5" line674="    //% strength.min=0 strength.max=255 strength.defl=250" line675="    //% duration.min=1 duration.max=9999 duration.defl=2500" line676="    //% weight=215" line677="    export function shout(repeat = 5, strength = 250, duration = 2500) {" line678="        if (quiet) {" line679="            quiet = false;" line680="            ave = duration / repeat;" line681="            gap = 0.3 * ave;" line682="            for (let index8 = 0; index8 &lt; repeat; index8++) {" line683="                performFlexFX(MoodSound.GROWL.toString(), randint(320, 450), strength, randint(0.5 * ave, 1.3 * ave));" line684="                basic.pause(gap);" line685="            }" line686="            quiet = true;" line687="        }" line688="    }" line689="" line690="" line691="}" numlines="692"></mutation><next><block type="variables_set" id="j*P_y#0a7wi5`b2J~7B?"><field name="VAR" id="am$pI3K{!LF9Z:WCp=(S">quiet</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean" id="-fs5OLutKzunm8ex@Ws%"><field name="BOOL">TRUE</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="o.6H?S-ffX|5vE8@+?gd" x="10" y="25788"><mutation name="doSound" functionid="s4MkLCrmS3s--=9XA(?4"><arg name="choice" id="4umjiy7bfp9691kjhwk3" type="number"></arg></mutation><field name="function_name">doSound</field><value name="4umjiy7bfp9691kjhwk3"><shadow type="argument_reporter_number" id="^QY|-7uY4`Z6)Fhs8Ky]"><field name="VALUE">choice</field></shadow></value><statement name="STACK"><block type="typescript_statement" id="y@;lUc-/xEf5B!KxYpoO" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (choice) {" line1="        case 1: flexFX.performFlexFX(MoodSound.TWEET.toString(), 800, 200, 400);" line2="            break;" line3="        case 2: flexFX.performFlexFX(MoodSound.LAUGH.toString(), 400, 200, 400);" line4="            break;" line5="        case 3: flexFX.performFlexFX(MoodSound.SNORE.toString(), 1, 200, 400);" line6="            break;" line7="        case 4: flexFX.performFlexFX(MoodSound.DOO.toString(), 500, 200, 300);" line8="            break;" line9="        case 5: flexFX.performFlexFX(MoodSound.QUERY.toString(), 400, 200, 700);" line10="            break;" line11="        case 6: flexFX.performFlexFX(MoodSound.UHOH.toString(), 350, 200, 650);" line12="            break;" line13="        case 7: flexFX.performFlexFX(MoodSound.MOAN.toString(), 500, 200, 700);" line14="            break;" line15="        case 8: flexFX.performFlexFX(MoodSound.DUH.toString(), 300, 200, 500);" line16="            break;" line17="        case 9: flexFX.performFlexFX(MoodSound.WAAH.toString(), 600, 200, 1100);" line18="            break;" line19="        case 10: flexFX.performFlexFX(MoodSound.GROWL.toString(), 250, 200, 700);" line20="    }" numlines="21"></mutation><next><block type="device_pause" id="{xks4*bt]J:I4eZyNIIZ"><value name="pause"><shadow type="timePicker" id=")dGCRUK7h5r!^Vx:AaT:"><field name="ms">1000</field></shadow></value></block></next></block></statement></block></xml>